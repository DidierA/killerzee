#!/usr/bin/env python
import sys
import argparse
from killerzee import *
from signal import *
from datetime import *
import binascii
import time
import pdb

sigstop=False

def sighandler(signal, frame):
    global sigstop
    sigstop=True

def check_ack(packet):
    try:
        fc = int(binascii.hexlify(packet[5:7]), 16)
        fctype = (fc & 0b0000111100000000) >> 8
        if fctype == 3:
            return True
    except:
        print "Error processing check_ack"

    return False

if __name__ == "__main__":
    pr = None
    signal(SIGINT, sighandler)
    packetcount=0

    # Command-line arguments
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-r', '--readfile', dest='rpcapfile', action='store', help='read packets from the specified libpcap file')
    parser.add_argument('-p', '--profile', dest='rfprofile', action='store', default="R2", help='specify the RF profile (one or R1, R2, or R3)')
    parser.add_argument('-c', '--country', dest='countrycode', action='store', default="US", help='specify the 2-letter country code')
    parser.add_argument('-n', '--count', dest='count', action='store', type=int, default=-1, help='stop capturing after this many packets')
    parser.add_argument('-w', '--wait', dest='txsleep', action='store', type=int, default=2, help='wait time between packets in seconds')
    parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='verbose output - display summary while saving packets')

    args = parser.parse_args()

    if args.rfprofile is not None:
        if args.rfprofile.upper() == 'R1':
            args.rfprofile = RFPROFILE_R1
        elif args.rfprofile.upper() == 'R2':
            args.rfprofile = RFPROFILE_R2
        elif args.rfprofile.upper() == 'R3':
            args.rfprofile = RFPROFILE_R3
        else:
            print >>sys.stderr, "ERROR: Invalid RF Profile Specified: %s"%args.rfprofile
            sys.exit(1)

    if not args.rpcapfile:
        print >>sys.stderr, "Must specify an input file with -r"
        sys.exit(1)

    pr = PcapReader(args.rpcapfile)
    kz = KillerZee(countrycode=args.countrycode,rfprofile=args.rfprofile)

    print("zwreplay: retransmitting frames from \'{0}\' with a delay of {1} seconds.".format(args.rpcapfile, args.txsleep))

    while not sigstop and args.count != packetcount:
        try:
            p = pr.pcap_next()
        except EOFError:
            break

        packet = p[1]
        # Check FCS on packet, and make sure it's not an ACK
        if calcfcs_r1(packet) != 0: # Check FCS, not safe for R3!
            continue

        if check_ack(packet) == True:
            continue
        kz.inject(packet[0:-1]) # Without FCS
        packetcount+=1
        time.sleep(args.txsleep)


    pr.close()
    print "Transmitted %d packets."%packetcount
