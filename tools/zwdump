#!/usr/bin/env python
import sys
import argparse
from killerzee import *
from signal import *
from datetime import *
import pdb


sigstop=False

def sighandler(signal, frame):
    global sigstop
    sigstop=True

if __name__ == "__main__":
    pd = None
    signal(SIGINT, sighandler)
    packetcount=0
    kzd = KillerZeeDecode()

    # Command-line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('-w', '--pcapfile', dest='wpcapfile', action='store', help='save packets to the specified libpcap file')
    parser.add_argument('-r', '--readfile', dest='rpcapfile', action='store', help='read packets from the specified libpcap file')
    parser.add_argument('-p', '--profile', dest='rfprofile', action='store', default="R2", help='specify the RF profile (one or R1, R2, or R3)')
    parser.add_argument('-c', '--country', dest='countrycode', action='store', default="US", help='specify the 2-letter country code')
    parser.add_argument('-n', '--count', dest='count', action='store', type=int, default=-1, help='stop capturing after this many packets')
    parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='verbose output - display summary while saving packets')
    parser.add_argument('-b', '--beam', dest='beam', action='store_true', help='do not suppress beam packets')

    args = parser.parse_args()

    if args.rfprofile is not None:
        if args.rfprofile.upper() == 'R1':
            args.rfprofile = RFPROFILE_R1
        elif args.rfprofile.upper() == 'R2':
            args.rfprofile = RFPROFILE_R2
        elif args.rfprofile.upper() == 'R3':
            args.rfprofile = RFPROFILE_R3
        else:
            print >>sys.stderr, "ERROR: Invalid RF Profile Specified: %s"%args.rfprofile
            sys.exit(1)

    if args.wpcapfile is not None:
        pd = PcapDumper(DLT_USER1, args.wpcapfile)

    if args.rpcapfile is not None:
        pr = PcapReader(args.rpcapfile)
        pcap_next = pr.pcap_next
    else:
        kz = KillerZee(countrycode=args.countrycode,rfprofile=args.rfprofile)
        pcap_next = kz.pcap_next

    print("zwdump: listening on rfcat, link-type DLT_USER1, capture size 54 bytes")

    while not sigstop and args.count != packetcount:
        try:
            p = pcap_next()
        except EOFError:
            break

        if p != None:
            if calcfcs_r1(p[1]) == 0: # Check FCS, not safe for R3!
                packetcount+=1
                if args.wpcapfile is not None:
                    pd.pcap_dump(p[1])
                if args.wpcapfile is None or args.verbose:
                    print datetime.now().strftime("%H:%M:%S.%f") + " " + kzd.decode_r1(p[1])
                    print hexdump(p[1])


    if args.wpcapfile is not None:
        pd.close()
    print "%d packets captured."%packetcount
